// ',' - and, | - or, {} - 0 or many, [] - 0 or 1, () - grouping

BLCK_TYPE_SCOPE = [TK_SCOPE], [TK_IDENTIFIER], TK_LBRACE, 
	CONS_TYPE_CLASS | CONS_TYPE_FNDEF | CONS_TYPE_IF | CONS_TYPE_WHILE | CONS_TYPE_FOR | STMT_TYPE_DECLARE | STMT_TYPE_ASSIGN | STMT_TYPE_INIT | STMT_TYPE_ECHO | STMT_TYPE_BREAK | STMT_TYPE_RETURN | STMT_TYPE_EXIT, 
	{ CONS_TYPE_CLASS | CONS_TYPE_FNDEF | CONS_TYPE_IF | CONS_TYPE_WHILE | CONS_TYPE_FOR | STMT_TYPE_DECLARE | STMT_TYPE_ASSIGN | STMT_TYPE_INIT | STMT_TYPE_ECHO STMT_TYPE_BREAK | STMT_TYPE_RETURN | STMT_TYPE_EXIT }, TK_RBRACE, TK_SEMICOLON ;

CONS_TYPE_CLASS = TK_CLASS, TK_IDENTIFIER, BLCK_TYPE_SCOPE, TK_SEMICOLON ;
CONS_TYPE_FNDEF = TK_FN, TK_IDENTIFIER, TK_LPAREN, TK_BOOL | TK_FLT | TK_INT | TK_STR | TK_IDENTIFIER, TK_IDENTIFIER, {TK_COMMA, TK_BOOL | TK_FLT | TK_INT | TK_STR | TK_IDENTIFIER, TK_IDENTIFIER}, TK_RPAREN, 
	BLCK_TYPE_SCOPE, TK_SEMICOLON ;

CONS_TYPE_IF = TK_IF, TK_LPAREN, EXPR_TYPE_COMPUTE, TK_RPAREN, BLCK_TYPE_SCOPE, TK_SEMICOLON ;
CONS_TYPE_WHILE = TK_WHILE, TK_LPAREN, EXPR_TYPE_COMPUTE, TK_RPAREN, BLCK_TYPE_SCOPE, TK_SEMICOLON ;

CONS_TYPE_FOR = TK_FOR, TK_LPAREN, TK_IDENTIFIER, TK_EQUALS, EXPR_TYPE_GROUP | EXPR_TYPE_COMPUTE | TERM_TYPE_VAR | TERM_TYPE_FNCALL | TERM_TYPE_INDEX | TERM_TYPE_PROP | TERM_TYPE_FACTOR, TK_SEMICOLON, 
	EXPR_TYPE_BOOL, TK_SEMICOLON, OPER_TYPE_INCREMENT | OPER_TYPE_DECREMENT, TK_RPAREN, BLCK_TYPE_SCOPE, TK_SEMICOLON ;

STMT_TYPE_DECLARE = TK_BOOL | TK_FLT | TK_INT | TK_STR, TERM_TYPE_VAR, TK_SEMICOLON ;
STMT_TYPE_ASSIGN = TERM_TYPE_VAR | TERM_TYPE_PROP, TK_EQUAL, EXPR_TYPE_GROUP | EXPR_TYPE_COMPUTE, TK_SEMICOLON ;
STMT_TYPE_INIT = TK_BOOL | TK_FLT | TK_INT | TK_STR | TK_IDENTIFIER, TK_IDENTIFIER, TK_EQUAL, EXPR_TYPE_GROUP | EXPR_TYPE_COMPUTE, TK_SEMICOLON ;
STMT_TYPE_ECHO = EXPR_TYPE_GROUP | EXPR_TYPE_COMPUTE, TK_SEMICOLON ;
STMT_TYPE_BREAK = TK_BREAK, TK_SEMICOLON ;
STMT_TYPE_RETURN = TK_RETURN, [ EXPR_TYPE_COMPUTE | TERM_TYPE_VAR | TERM_TYPE_FNCALL | TERM_TYPE_INDEX | TERM_TYPE_PROP | TERM_TYPE_NUM | TERM_TYPE_STRING ], TK_SEMICOLON ;

STMT_TYPE_EXIT = TK_EXIT, TK_LPAREN, EXPR_TYPE_COMPUTE, TK_RPAREN, TK_SEMICOLON ;

EXPR_TYPE_GROUP = TK_LPAREN, EXPR_TYPE_COMPUTE, TK_RPAREN ;
EXPR_TYPE_COMPUTE = [OPER_TYPE_NOT], EXPR_TYPE_GROUP | TERM_TYPE_VAR | TERM_TYPE_FNCALL | TERM_TYPE_PROP | 
	TERM_TYPE_FACTOR | TERM_TYPE_NUM | TERM_TYPE_STRING,
	[(OPER_TYPE_MULT | OPER_TYPE_DIV | OPER_TYPE_SUM | OPER_TYPE_DIFF | OPER_TYPE_MODULUS) | (OPER_TYPE_NOT_EQUAL | OPER_TYPE_EQUAL_EQUAL | OPER_TYPE_GREATER_EQUAL | OPER_TYPE_LESS_EQUAL | OPER_TYPE_AND | OPER_TYPE_OR),
	[OPER_TYPE_NOT], EXPR_TYPE_GROUP | EXPR_TYPE_COMPUTE | TERM_TYPE_VAR | TERM_TYPE_FNCALL | TERM_TYPE_PROP | TERM_TYPE_FACTOR | TERM_TYPE_NUM | TERM_TYPE_STRING] ;

TERM_TYPE_VAR = TK_IDENTIFIER ;
TERM_TYPE_PROP = TK_IDENTIFIER, TK_DOT, TK_IDENTIFIER, {TK_DOT, TK_IDENTIFIER} ;
TERM_TYPE_FNCALL = TK_IDENTIFIER, TK_LPAREN, EXPR_TYPE_COMPUTE, {TK_COMMA, EXPR_TYPE_COMPUTE}, TK_RPAREN, BLCK_TYPE_SCOPE, TK_SEMICOLON ;
TERM_TYPE_INDEX = TK_IDENTIFIER, TK_LSQUARE, EXPR_TYPE_COMPUTE, TK_RSQUARE ;
TERM_TYPE_NUM = TK_NUM ;
TERM_TYPE_STRING = TK_STRING ;

OPER_TYPE_MULT = TK_STAR ;
OPER_TYPE_DIV = TK_DIV ;
OPER_TYPE_SUM = TK_SUM ;
OPER_TYPE_DIFF = TK_MINUS ;
OPER_TYPE_MODULUS = TK_MOD ;

OPER_TYPE_AND = TK_AND ;
OPER_TYPE_OR = TK_OR ;
OPER_TYPE_NOT = TK_BANG ;
OPER_TYPE_EQUAL_EQUAL = TK_EQUAL_EQUAL ;
OPER_TYPE_NOT_EQUAL = TK_BANG, TK_EQUAL ;
OPER_TYPE_GREATER_EQUAL = TK_GREATER_EQUAL ;
OPER_TYPE_LESS_EQUAL = TK_LESS_EQUAL

OPER_TYPE_EQUALS = TK_EQUAL ;
OPER_TYPE_PLUS_EQUAL = TK_PLUS, TK_EQUAL ;
OPER_TYPE_MINUS_EQUAL = TK_MINUS, TK_EQUAL ;
OPER_TYPE_STAR_EQUAL = TK_STAR, TK_EQUAL ;
OPER_TYPE_DIV_EQUAL = TK_FSLASH, TK_EQUAL ;
OPER_TYPE_MOD_EQUAL = TK_MOD, TK_EQUAL ;
OPER_TYPE_INCREMENT = TERM_TYPE_VAR | TERM_TYPE_PROP, TK_PLUS, TK_PLUS ;
OPER_TYPE_DECREMENT = TERM_TYPE_VAR | TERM_TYPE_PROP, TK_MINUS, TK_MINUS ;
